# -*- coding: utf-8 -*-
# vim: ft=yaml
---
{# Attempt to restrict pillar.get calls to the map.jinja such that we can
   improve pillar performance on the master.  Generally heavy pillar usage has a
   large impact on the CPU/Memory load of a SaltMaster, and it has an even worse
   impact on time spent processing git pillar data. #}

{% import_yaml 'al_agents/defaults.yaml' as defaults %}

{# merge osfamily specific defaults over our generic defaults #}
{% import_yaml 'al_agents/osfamilymap.yaml' as osfamilymap %}
{% set osfamily = salt['grains.filter_by'](osfamilymap, grain='os_family') or {} %}
{% do salt['defaults.merge'](defaults['al_agents'], osfamily) %}

{# merge os specific defaults over our defaults #}
{% import_yaml 'al_agents/osmap.yaml' as osmap %}
{% set osmap = salt['grains.filter_by'](osmap, grain='os') or {} %}
{% do salt['defaults.merge'](defaults['al_agents'], osmap) %}

{# Allow custom imports to reduce pillar load on the master #}
{% set import_file = salt['pillar.get']('al_agents:defaults', '') %}
{% if import_file != '' %}
  {% set custom_defaults = {} %}
  {% set import_type = import_file|lower|regex_match('.*\.(json|ya?ml)$') %}
  {% if import_type|length > 0 %}
    {% if import_type[0] in ['json'] %}
      {% import_json import_file as custom_defaults %}
    {% elif import_type[0] in ['yml', 'yaml'] %}
      {% import_yaml import_file as custom_defaults %}
    {% endif %}
  {% endif %}
  {% do salt['defaults.merge'](defaults, custom_defaults) %}
{% endif %}

{# While we try to encourage usage of custom defaults within the state tree, we
   want to be flexible enough to support pillar overrides for any setting #}
{% set al_agents_settings = salt['pillar.get']('al_agents', defaults['al_agents'], merge=True) %}

{% set configure_options = [] %}
{% set provision_options = [] %}
{% set install_options = [] %}

{# Setting variables for provisioning of the agent #}
{% if al_agents_settings.registration_key|length > 0 %}
  {% if salt.file.exists(al_agents_settings.keyfile %}
    {% do install_options.append('PROV_NOW=0') %}
    {% do install_options.append('INSTALL_ONLY=1') %}
  {% else %}
    {% do install_options.append('PROV_KEY=' ~ al_agents_settings.registration_key) %}
    {% do provision.append('--key ' ~ al_agents_settings.registration_key) %}
  {% endif %}
{% endif %}

{# Setting variables for configuring the agent #}
{% if al_agents_settings.proxy_url|length > 0 %}
  {% do configure_options.append(' --proxy ' ~ al_agents_settings.proxy_url) %}
  {% do install_options.append('USE_PROXY=' ~ al_agents_settings.proxy_url) %}
{% endif %}

{% if al_agents_settings.egress_url|length > 0 %}
  {% do configure_options.append('--host {{ al_agents_settings.egress_url }}') %}
  {% do install_options.append('SENSOR_HOST={{ al_agents_settings.egress_url}}') %}
{% endif %}

{% if al_agents_settings.for_imaging %}
  {% do install_options.append('PROV_ONLY=host') %}
  {% do install_options.append('INSTALL_ONLY=1') %}
{% endif %}

{% set al_agents_settings.configure_options = configure_options|join(' ') %}
{% set al_agents_settings.provision_options = provision_options|join(' ') %}
{% set al_agents_settings.install_options = install_options|join(' ') %}
